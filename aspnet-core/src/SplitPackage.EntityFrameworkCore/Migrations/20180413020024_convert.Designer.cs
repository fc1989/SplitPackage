// <auto-generated />
using Abp.Authorization;
using Abp.BackgroundJobs;
using Abp.Events.Bus.Entities;
using Abp.Notifications;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using SplitPackage.Business;
using SplitPackage.EntityFrameworkCore;
using System;

namespace SplitPackage.Migrations
{
    [DbContext(typeof(SplitPackageDbContext))]
    [Migration("20180413020024_convert")]
    partial class convert
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity<Logistic>(b =>
            {
                b.Property(p => p.Id).ValueGeneratedOnAdd();
                b.Property(p=>p.CorporationName).IsRequired().HasMaxLength(Logistic.MaxCorporationNameLength);
                b.Property(p => p.CorporationUrl).HasMaxLength(Logistic.MaxCorporationUrlLength);
                b.Property(p => p.LogisticFlag).IsRequired().HasMaxLength(Logistic.MaxLogisticFlagLength);
                b.Property(p => p.CreatorUserId);
                b.Property(p => p.DeleterUserId);
                b.Property(p => p.DeletionTime);
                b.Property(p => p.IsActive);
                b.Property(p => p.IsDeleted);
                b.Property(p => p.LastModificationTime);
                b.Property(p => p.LastModifierUserId);
                b.HasKey(p => p.Id);
                b.HasIndex(o=> o.LogisticFlag).IsUnique();
                b.ToTable("Logistics");
            });

            modelBuilder.Entity<LogisticLine>(b =>
            {
                b.Property(p => p.Id).ValueGeneratedOnAdd();
                b.Property(p => p.LineName).IsRequired().HasMaxLength(LogisticLine.MaxLineNameLength);
                b.Property(p => p.LineCode).IsRequired().HasMaxLength(LogisticLine.MaxLineCodeLength);
                b.Property(p => p.IsActive);
                b.Property(p => p.LogisticId).IsRequired();
                b.Property(p => p.CreatorUserId);
                b.Property(p => p.DeleterUserId);
                b.Property(p => p.DeletionTime);
                b.Property(p => p.IsActive);
                b.Property(p => p.IsDeleted);
                b.Property(p => p.LastModificationTime);
                b.Property(p => p.LastModifierUserId);
                b.Property(p => p.TenantId);
                b.HasKey(p => p.Id);
                b.HasIndex(o => new { o.LogisticId ,o.LineCode }).IsUnique();
                b.ToTable("LogisticLines");
                b.HasOne(p => p.LogisticBy).WithMany(p=>p.LogisticLines).HasForeignKey(p=>p.LogisticId);
            });

            modelBuilder.Entity<NumFreight>(b =>
            {
                b.Property(p => p.Id).ValueGeneratedOnAdd();
                b.Property(p => p.LogisticLineId).IsRequired();
                b.Property(p => p.ProductNum);
                b.Property(p => p.PackagePrice);
                b.Property(p => p.IsActive);
                b.Property(p => p.CreatorUserId);
                b.Property(p => p.DeleterUserId);
                b.Property(p => p.DeletionTime);
                b.Property(p => p.IsActive);
                b.Property(p => p.IsDeleted);
                b.Property(p => p.LastModificationTime);
                b.Property(p => p.LastModifierUserId);
                b.Property(p => p.TenantId);
                b.HasKey(p => p.Id);
                b.ToTable("NumFreights");
                b.HasOne(p => p.LogisticLineBy).WithMany(p=>p.NumFreights).HasForeignKey(p=>p.LogisticLineId);
            });

            modelBuilder.Entity<Product>(b =>
            {
                b.Property(p => p.Id).ValueGeneratedOnAdd();
                b.Property(p => p.CreationTime);
                b.Property(p => p.CreatorUserId);
                b.Property(p => p.DeleterUserId);
                b.Property(p => p.DeletionTime);
                b.Property(p => p.IsActive);
                b.Property(p => p.IsDeleted);
                b.Property(p => p.LastModificationTime);
                b.Property(p => p.LastModifierUserId);
                b.Property(p => p.TenantId);
                b.Property(p => p.ProductName).IsRequired().HasMaxLength(Product.MaxProductNameLength);
                b.Property(p => p.AbbreName).IsRequired().HasMaxLength(Product.MaxAbbreNameLength);
                b.Property(p => p.ProductNo).IsRequired().HasMaxLength(Product.MaxProductNoLength);
                b.Property(p => p.Sku).IsRequired().HasMaxLength(Product.MaxSkuLength);
                b.Property(p => p.TaxNo).HasMaxLength(Product.MaxTaxNoLength);
                b.Property(p => p.Brand).HasMaxLength(Product.MaxBrandLength);
                b.Property(p => p.Weight).HasDefaultValue(Product.DefaultWeightValue);
                b.HasKey(p=>p.Id);
                b.HasIndex(p=>new { p.TenantId,p.Sku}).IsUnique();
                b.ToTable("Products");
                b.HasMany(p => p.ProductClasses).WithOne(p => p.ProductBy).HasForeignKey(p => p.ProductId);
            });

            modelBuilder.Entity<ProductClass>(b =>
            {
                b.Property(p => p.Id).ValueGeneratedOnAdd();
                b.Property(p => p.ClassName).IsRequired().HasMaxLength(ProductClass.MaxClassNameLength);
                b.Property(p => p.PTId).IsRequired().HasMaxLength(ProductClass.MaxPTIdLength);
                b.Property(p => p.PostTaxRate);
                b.Property(p => p.BCTaxRate);
                b.Property(p => p.IsActive);
                b.Property(p => p.CreatorUserId);
                b.Property(p => p.DeleterUserId);
                b.Property(p => p.DeletionTime);
                b.Property(p => p.IsActive);
                b.Property(p => p.IsDeleted);
                b.Property(p => p.LastModificationTime);
                b.Property(p => p.LastModifierUserId);
                b.HasKey(p => p.Id);
                b.HasIndex(o => o.PTId).IsUnique();
                b.ToTable("ProductClasses");
            });

            modelBuilder.Entity<ProductProductClass>(b =>
            {
                b.Property(p => p.ProductId);
                b.Property(p => p.ProductClassId);
                b.ToTable("Product_ProductClass");
                b.HasKey(p => p.Id);
                b.HasOne(pt => pt.ProductClassBy)
                    .WithMany(t => t.Products)
                    .HasForeignKey(pt => pt.ProductClassId);
                b.HasOne(pt => pt.ProductBy)
                    .WithMany(p => p.ProductClasses)
                    .HasForeignKey(pt => pt.ProductId);
            });

            modelBuilder.Entity<SplitRule>(b =>
            {
                b.Property(p => p.Id).ValueGeneratedOnAdd();
                b.Property(p => p.LogisticLineId).IsRequired();
                b.Property(p => p.MinPackage);
                b.Property(p => p.MaxPackage);
                b.Property(p => p.MaxWeight);
                b.Property(p => p.MaxTax);
                b.Property(p => p.MaxPrice);
                b.Property(p => p.IsActive);
                b.Property(p => p.CreatorUserId);
                b.Property(p => p.DeleterUserId);
                b.Property(p => p.DeletionTime);
                b.Property(p => p.IsActive);
                b.Property(p => p.IsDeleted);
                b.Property(p => p.LastModificationTime);
                b.Property(p => p.LastModifierUserId);
                b.Property(p => p.TenantId);
                b.HasKey(p => p.Id);
                b.ToTable("SplitRules");
            b.HasOne(p => p.LogisticLineBy).WithMany(p => p.SplitRules).HasForeignKey(p => p.LogisticLineId);
            });

            modelBuilder.Entity<SplitRuleProductClass>(b =>
            {
                b.Property(p => p.SplitRuleId).IsRequired();
                b.Property(p => p.ProductClassId).IsRequired();
                b.Property(p => p.MaxNum);
                b.HasKey(p => new { p.SplitRuleId, p.ProductClassId });
                b.ToTable("SplitRule_ProductClass");
                b.HasOne(pt => pt.SplitRuleBy)
                    .WithMany(p => p.ProductClasses)
                    .HasForeignKey(pt => pt.SplitRuleId);
                b.HasOne(pt => pt.ProductClassBy)
                    .WithMany(t => t.SplitRules)
                    .HasForeignKey(pt => pt.ProductClassId);
            });

            modelBuilder.Entity<WeightFreight>(b =>
            {
                b.Property(p => p.Id).ValueGeneratedOnAdd();
                b.Property(p => p.LogisticLineId).IsRequired();
                b.Property(p => p.StartingWeight);
                b.Property(p => p.StartingPrice);
                b.Property(p => p.StepWeight);
                b.Property(p => p.Price);
                b.Property(p => p.IsActive);
                b.Property(p => p.CreatorUserId);
                b.Property(p => p.DeleterUserId);
                b.Property(p => p.DeletionTime);
                b.Property(p => p.IsActive);
                b.Property(p => p.IsDeleted);
                b.Property(p => p.LastModificationTime);
                b.Property(p => p.LastModifierUserId);
                b.Property(p => p.TenantId);
                b.HasKey(p => p.Id);
                b.ToTable("WeightFreights");
                b.HasOne(p => p.LogisticLineBy).WithMany(p=>p.WeightFreights).HasForeignKey(p=>p.LogisticLineId);
            });
#pragma warning restore 612, 618
        }
    }
}
