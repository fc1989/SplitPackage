// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using SplitPackage.EntityFrameworkCore;
using System;

namespace SplitPackage.Migrations
{
    [DbContext(typeof(SplitPackageDbContext))]
    partial class SplitPackageDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("SplitPackage.Business.Logistic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CorporationName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CorporationUrl")
                        .HasMaxLength(200);

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogisticFlag")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("LogisticFlag")
                        .IsUnique();

                    b.ToTable("Logistics");
                });

            modelBuilder.Entity("SplitPackage.Business.LogisticLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LineCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("LogisticId");

                    b.HasKey("Id");

                    b.HasIndex("LogisticId", "LineCode")
                        .IsUnique();

                    b.ToTable("LogisticLines");
                });

            modelBuilder.Entity("SplitPackage.Business.NumFreight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long>("LogisticLineId");

                    b.Property<double>("PackagePrice");

                    b.Property<int>("ProductNum");

                    b.HasKey("Id");

                    b.ToTable("NumFreights");
                });

            modelBuilder.Entity("SplitPackage.Business.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AbbreName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Brand")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ProductNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TaxNo")
                        .HasMaxLength(20);

                    b.Property<int?>("TenantId");

                    b.Property<double>("Weight")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Sku")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SplitPackage.Business.ProductClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BCTaxRate");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PTId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("PostTaxRate");

                    b.HasKey("Id");

                    b.HasIndex("PTId")
                        .IsUnique();

                    b.ToTable("ProductClasses");
                });

            modelBuilder.Entity("SplitPackage.Business.ProductProductClass", b =>
                {
                    b.Property<long>("ProductId");

                    b.Property<long>("ProductClassId");

                    b.HasKey("ProductId", "ProductClassId");

                    b.ToTable("Product_ProductClass");
                });

            modelBuilder.Entity("SplitPackage.Business.SplitRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long>("LogisticLineId");

                    b.Property<int>("MaxPackage");

                    b.Property<double>("MaxPrice");

                    b.Property<double>("MaxTax");

                    b.Property<double>("MaxWeight");

                    b.Property<int>("MinPackage");

                    b.HasKey("Id");

                    b.ToTable("SplitRules");
                });

            modelBuilder.Entity("SplitPackage.Business.SplitRuleProductClass", b =>
                {
                    b.Property<long>("SplitRuleId");

                    b.Property<long>("ProductClassId");

                    b.Property<int>("MaxNum");

                    b.HasKey("SplitRuleId", "ProductClassId");

                    b.ToTable("SplitRule_ProductClass");
                });

            modelBuilder.Entity("SplitPackage.Business.WeightFreight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long>("LogisticLineId");

                    b.Property<double>("Price");

                    b.Property<double>("StartingPrice");

                    b.Property<double>("StartingWeight");

                    b.Property<double>("StepWeight");

                    b.HasKey("Id");

                    b.ToTable("WeightFreights");
                });

            modelBuilder.Entity("SplitPackage.Business.LogisticLine", b =>
                {
                    b.HasOne("SplitPackage.Business.Logistic", "LogisticBy")
                        .WithMany("LogisticLines")
                        .HasForeignKey("LogisticId");
                });

            modelBuilder.Entity("SplitPackage.Business.NumFreight", b =>
                {
                    b.HasOne("SplitPackage.Business.LogisticLine", "LogisticLineBy")
                        .WithMany("NumFreights")
                        .HasForeignKey("LogisticLineId");
                });

            modelBuilder.Entity("SplitPackage.Business.ProductProductClass", b =>
                {
                    b.HasOne("SplitPackage.Business.ProductClass", "ProductClassBy")
                        .WithMany("Products")
                        .HasForeignKey("ProductClassId");

                    b.HasOne("SplitPackage.Business.Product", "ProductBy")
                        .WithMany("ProductClasses")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("SplitPackage.Business.SplitRule", b =>
                {
                    b.HasOne("SplitPackage.Business.LogisticLine", "LogisticLineBy")
                        .WithMany("SplitRules")
                        .HasForeignKey("LogisticLineId");
                });

            modelBuilder.Entity("SplitPackage.Business.SplitRuleProductClass", b =>
                {
                    b.HasOne("SplitPackage.Business.ProductClass", "ProductClassBy")
                        .WithMany("SplitRules")
                        .HasForeignKey("ProductClassId");

                    b.HasOne("SplitPackage.Business.SplitRule", "SplitRuleBy")
                        .WithMany("ProductClasses")
                        .HasForeignKey("SplitRuleId");
                });

            modelBuilder.Entity("SplitPackage.Business.WeightFreight", b =>
                {
                    b.HasOne("SplitPackage.Business.LogisticLine", "LogisticLineBy")
                        .WithMany("WeightFreights")
                        .HasForeignKey("LogisticLineId");
                });
#pragma warning restore 612, 618
        }
    }
}
